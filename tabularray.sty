%%% % -*- coding: utf-8 -*-
%%% ----------------------------------------------------------------------------
%%% Tabularray: Typeset tabulars and arrays with LaTeX3
%%% Author    : Jianrui Lyu <tolvjr@163.com>
%%% Repository: https://github.com/lvjr/tabularray
%%% License   : The LaTeX Project Public License 1.3
%%% ----------------------------------------------------------------------------

\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\ProvidesExplPackage{tabularray}{2021-03-15}{2021A}
  {Typeset tabulars and arrays with LaTeX3}

%\RequirePackage{xparse}

\ExplSyntaxOn

\NewDocumentEnvironment { tblr } { O{c} m +b }
  { \buildtblr { #1 } { #2 } { #3 } } { }

\cs_generate_variant:Nn \prop_item:Nn { Ne }
\cs_generate_variant:Nn \regex_replace_all:NnN { NVN }
\cs_generate_variant:Nn \seq_map_indexed_inline:Nn { cn }
\cs_generate_variant:Nn \tl_gput_right:Nn { Nf }
\cs_generate_variant:Nn \tl_if_blank:nTF { xTF }
\prg_generate_conditional_variant:Nnn \prop_if_in:Nn { c } { T }

\tl_new:N  \l_tblr_a_tl
\tl_new:N  \l_tblr_b_tl
\tl_new:N  \l_tblr_c_tl
\tl_new:N  \l_tblr_d_tl
\tl_new:N  \l_tblr_h_tl
\tl_new:N  \l_tblr_i_tl  % for row index
\tl_new:N  \l_tblr_j_tl  % for column index
\tl_new:N  \l_tblr_v_tl
\tl_new:N  \l_tblr_w_tl
\int_new:N \l_tblr_c_int % for column number
\int_new:N \l_tblr_r_int % for row number
\dim_new:N \l_tblr_d_dim % for depth
\dim_new:N \l_tblr_h_dim % for height
\dim_new:N \l_tblr_w_dim % for width
\box_new:N \l_tblr_c_box % for cell box

\int_new:N \g_tblr_level_int % store table nesting level
\prop_new:c { g_tblr_cell_1_prop } % store table cell text of level 1
\prop_new:c { g_tblr_spec_1_prop } % store table specification of level 1

\cs_new_protected:Npn \tblr_prop_gput:nnn #1 #2 #3
  {
    \prop_gput:cnn
      { g_tblr_#1_ \int_use:N \g_tblr_level_int _prop } { #2 } { #3 }
  }
\cs_generate_variant:Nn \tblr_prop_gput:nnn { nnx, nnV, nxn, nxx, nxV }

\cs_new:Npn \tblr_prop_item:nn #1 #2
  {
    \prop_item:cn { g_tblr_#1_ \int_use:N \g_tblr_level_int _prop } { #2 }
  }
\cs_generate_variant:Nn \tblr_prop_item:nn { ne }

\cs_new_protected:Npn \tblr_prop_if_in:nnT #1
  { \prop_if_in:cnT { g_tblr_#1_ \int_use:N \g_tblr_level_int _prop } }
\cs_new_protected:Npn \tblr_prop_if_in:nnTF #1
  { \prop_if_in:cnTF { g_tblr_#1_ \int_use:N \g_tblr_level_int _prop } }
\prg_generate_conditional_variant:Nnn \tblr_prop_if_in:nn { nx } { T, TF }

\cs_new_protected:Npn \tblr_prop_log:n #1
  {
    \prop_log:c { g_tblr_#1_ \int_use:N \g_tblr_level_int _prop }
  }

%% Read, split and build the table

\cs_new_protected:Npn \buildtblr #1 #2 #3
  {
    \int_gincr:N \g_tblr_level_int
    \prop_gclear_new:c { g_tblr_cell_ \int_use:N \g_tblr_level_int _prop }
    \prop_gclear_new:c { g_tblr_spec_ \int_use:N \g_tblr_level_int _prop }
    \__tblr_initial_table_command
    \__tblr_split_table:n { #3 }
    \__tblr_initial_table_spec
    \__tblr_parse_column_spec:n { #2 }
    \__tblr_calculate_cell_size
    \__tblr_build_whole:n { #1 }
    \int_gdecr:N \g_tblr_level_int
  }

%% Insert and remove braces for nesting environments inside cells
%% These make line split and cell split workable
%% We need to replace N times for N level nestings
\regex_const:Nn \c_tblr_insert_braces_regex
  {
    \c{begin} \cB\{ (\c[^BE].*) \cE\} (.*?) \c{end} \cB\{ (\c[^BE].*) \cE\}
  }
\tl_const:Nn \c_tblr_insert_braces_tl
  {
    \c{begin} \cB\{ \cB\{ \1 \cE\} \2 \c{end} \cE\} \cB\{ \3 \cE\}
  }
\regex_const:Nn \c_tblr_remove_braces_regex
  {
    \c{begin} \cB\{ \cB\{ (.*?) \c{end} \cE\}
  }
\tl_const:Nn \c_tblr_remove_braces_tl
  {
    \c{begin} \cB\{ \1 \c{end}
  }
\cs_new_protected:Npn \tblr_insert_braces:N #1
  {
    \regex_replace_all:NVN \c_tblr_insert_braces_regex \c_tblr_insert_braces_tl #1
    \regex_replace_all:NVN \c_tblr_insert_braces_regex \c_tblr_insert_braces_tl #1
  }
\cs_new_protected:Npn \tblr_remove_braces:N #1
  {
    \regex_replace_all:NVN \c_tblr_remove_braces_regex \c_tblr_remove_braces_tl #1
    \regex_replace_all:NVN \c_tblr_remove_braces_regex \c_tblr_remove_braces_tl #1
  }

%% Split table content to cells and store them
%% #1: table content

\seq_new:N \l_tblr_lines_seq
\int_new:N \l_tblr_row_count_int
\int_new:N \l_tblr_col_count_int

\cs_new_protected:Npn \__tblr_split_table:n #1
  {
    \int_zero:N \l_tblr_row_count_int
    \int_zero:N \l_tblr_col_count_int
    \__tblr_split_table_to_lines:nN { #1 } \l_tblr_lines_seq
    \__tblr_split_lines_to_cells:N \l_tblr_lines_seq
  }

%% Split table content to a sequence of lines
%% #1: table content, #2: resulting sequence of lines
\cs_new_protected:Npn \__tblr_split_table_to_lines:nN #1 #2
  {
    \tl_set:Nn \l_tmpa_tl { #1 }
    \tblr_insert_braces:N \l_tmpa_tl
    \seq_set_split:NnV \l_tmpa_seq { \\ } \l_tmpa_tl
    \seq_clear:N #2
    \seq_map_inline:Nn \l_tmpa_seq
      {
        \bool_lazy_or:nnTF
          { \tl_if_head_eq_meaning_p:nN { ##1 } * }
          { \tl_if_head_eq_meaning_p:nN { ##1 } [ }
          { \seq_put_right:Nn #2 { \__tblr_newline_skip:w ##1 } }
          { \seq_put_right:Nn #2 { ##1 } }
      }
    \int_set:Nn \l_tblr_row_count_int { \seq_count:N #2 }
  }

%% Split table lines to cells and store them
%% #1: sequence of lines
\cs_new_protected:Npn \__tblr_split_lines_to_cells:N #1
  {
    \seq_map_indexed_function:NN #1 \__tblr_split_one_line:nn
    \tblr_prop_log:n { cell }
  }

%% Two counters for row and column numbering
\int_new:N \rownum
\int_new:N \colnum

%% Split one line into cells and store them
%% #1: row number, #2 the line text
\cs_new_protected:Npn \__tblr_split_one_line:nn #1 #2
  {
    \seq_set_split:Nnn \l_tmpa_seq { & } { #2 }
    \int_zero:N \l_tblr_c_int
    \seq_map_indexed_inline:Nn \l_tmpa_seq
      {
        \tl_set:Nn \l_tmpa_tl { ##2 }
        \tblr_remove_braces:N \l_tmpa_tl
        \tblr_prop_gput:nnV { cell } { ( #1, ##1 ) } \l_tmpa_tl
        \int_incr:N \l_tblr_c_int
      }
    %% Measure the last row with single cell and parse \hline at the same time
    %% Decrease row count by 1 when it's an empty cell (has only \hline)
    %% We need to do it here since the > or < column type may add text to cells
    \bool_set_false:N \l_tmpa_bool
    \int_compare:nNnT { \l_tblr_c_int } = { 1 }
      {
        \int_set:Nn \rownum { #1 }
        \int_set:Nn \colnum { 1 }
        \__tblr_measure_cell_size:nnNNN
          { #1 } { 1 } \l_tblr_w_dim \l_tblr_h_dim \l_tblr_d_dim
        \bool_lazy_and:nnT
          { \dim_compare_p:nNn { \l_tblr_h_dim } = { 0pt } }
          { \dim_compare_p:nNn { \l_tblr_d_dim } = { 0pt } }
          { \bool_set_true:N \l_tmpa_bool }
      }
    \bool_if:NTF \l_tmpa_bool
      { \int_decr:N \l_tblr_row_count_int }
      {
        \tblr_prop_gput:nnx
          { spec } { row[#1] / cell-number } { \int_use:N \l_tblr_c_int }
        \int_compare:nT { \l_tblr_c_int > \l_tblr_col_count_int }
          {
            \int_set_eq:NN \l_tblr_col_count_int \l_tblr_c_int
          }
      }
  }

\prop_const_from_keyval:Nn \c_tblr_default_keyval_row_prop
  {
    rowsep-above   = 0.2em,
    rowsep-below   = 0.2em,
    natural-height = 0pt,
    natural-depth  = 0pt,
  }

\prop_const_from_keyval:Nn \c_tblr_default_keyval_col_prop
  {
    colsep-left    = 0.6em,
    colsep-right   = 0.6em,
    halign         = left,
    valign         = top,
    natural-width  = 0pt,
  }

\prop_const_from_keyval:Nn \c_tblr_default_keyval_cell_prop
  {
    natural-width  = 0pt,
    natural-height = 0pt,
    natural-depth  = 0pt,
  }

\cs_new_protected:Npn \__tblr_initial_table_spec
  {
    \int_step_variable:nNn { \l_tblr_row_count_int } \l_tblr_i_tl
      {
        \prop_map_inline:Nn \c_tblr_default_keyval_row_prop
          {
            \tblr_prop_gput:nxn { spec } { row[\l_tblr_i_tl] / ##1 } { ##2 }
          }
        \int_step_variable:nNn { \l_tblr_col_count_int } \l_tblr_j_tl
          {
            \prop_map_inline:Nn \c_tblr_default_keyval_cell_prop
              {
                \tblr_prop_gput:nxn { spec }
                  { cell[\l_tblr_i_tl][\l_tblr_j_tl] / ##1 } { ##2 }
              }
          }
      }
    \int_step_variable:nNn { \l_tblr_col_count_int } \l_tblr_j_tl
      {
        \prop_map_inline:Nn \c_tblr_default_keyval_col_prop
          {
            \tblr_prop_gput:nxn { spec } { col[\l_tblr_j_tl] / ##1 } { ##2 }
          }
      }
  }

\NewDocumentCommand { \settblr } { m }
  { \tblr_setup:n { #1 } }

%% Setup the table
\cs_new_protected:Npn \tblr_setup:n #1
  {
    \keys_set:nn { tblr } { #1 }
  }
\cs_generate_variant:Nn \tblr_setup:n { x }

%% If the key doesn't exist, create it ahead
\cs_new_protected:Npn \tblr_keys_define_set:nn #1 #2
  {
    \keys_if_exist:nnF { tblr } { #1 }
      {
        \keys_define:nn { tblr }
          { #1 .code:n = \tblr_keys_gput:nn { #1 } { ##1 } }
      }
    \keys_set:nn { tblr } { #1 = #2 }
  }
\cs_generate_variant:Nn \tblr_keys_define_set:nn { xn, xx }

\cs_new_protected:Npn  \tblr_keys_gput:nn #1 #2
  { \tblr_prop_gput:nnn { spec } { #1 } { #2 } }

\keys_define:nn { tblr }
  {
    hline .code:n = \__tblr_spec_hline:n { #1 },
  }

%% Treat \\*[dimen] command
\NewDocumentCommand \__tblr_newline_skip:w { s o }
  {
    \IfBooleanT { #1 }
      {
        \tblr_prop_gput:nxx
          { spec }
          { row[\int_eval:n {\rownum - 1}] / pagebreak }
          { none }
      }
    \IfValueT { #2 }
      {
        \tblr_prop_gput:nxx
          { spec }
          { row[\int_eval:n {\rownum - 1}] / extra-rowsep-below }
          { #2 }
      }
  }

\cs_new_protected:Npn \__tblr_spec_hline:n #1
  {
    \tblr_prop_gput:nxx
      { spec }
      { hline[\int_use:N \rownum] / style }
      { solid }
  }

\cs_new_protected:Npn \__tblr_initial_table_command
  {
    \cs_set_protected:Npn \hline
      { \tblr_setup:n { hline } }
  }

%% Some primitive column types

\str_const:Nn \c_tblr_primitive_column_types_str { Q | < > }
\tl_new:N \g_tblr_expanded_colspec_tl

\exp_args:Nc \NewDocumentCommand { tblr_primitive_column_type_ Q } { O{} }
  {
    \int_incr:N \colnum
    \keys_set:nn { tblr-column-type-Q } { #1 }
    \__tblr_execute_column_spec_next:N
  }
\exp_args:Nc \NewDocumentCommand { tblr_column_type_ Q } { O{} }
  {
    \tl_gput_right:Nn \g_tblr_expanded_colspec_tl { Q[#1] }
    \__tblr_expand_column_spec_next:N
  }

\keys_define:nn { tblr-column-type-Q }
  {
    l .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / halign } { left },
    c .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / halign } { center },
    r .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / halign } { right },
    t .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / valign } { top },
    p .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / valign } { top },
    m .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / valign } { middle },
    b .code:n = \tblr_keys_define_set:xn
                  { col[\int_use:N \colnum] / valign } { bottom },
    wd .code:n = \tblr_keys_define_set:xx
                   { col[\int_use:N \colnum] / width } { \dim_eval:n { #1 } },
  }

\exp_args:Nc \NewDocumentCommand { tblr_primitive_column_type_ | } { O{} }
  {
    \tl_if_blank:nTF { #1 }
      {
        \tblr_prop_gput:nxx { spec }
          { vline[\int_eval:n {\colnum + 1}] / style } { solid }
      }
      { \keys_set:nn { tblr-column-type-| } { #1 } }
    \__tblr_execute_column_spec_next:N
  }
\exp_args:Nc \NewDocumentCommand { tblr_column_type_ | } { O{} }
  {
    \tl_gput_right:Nn \g_tblr_expanded_colspec_tl { |[#1] }
    \__tblr_expand_column_spec_next:N
  }

\keys_define:nn { tblr-column-type-| }
  {
    text .code:n = \tblr_prop_gput:nxn { spec }
                     { vline[\int_eval:n {\colnum + 1}] / text } { #1 },
    fg .code:n = \tblr_prop_gput:nxn { spec }
                   { vline[\int_eval:n {\colnum + 1}] / foreground } { #1 },
    bg .code:n = \tblr_prop_gput:nxn { spec }
                   { vline[\int_eval:n {\colnum + 1}] / background } { #1 },
  }

\exp_args:Nc \NewDocumentCommand { tblr_primitive_column_type_ > } { O{} m }
  {
    \tl_if_blank:nF { #1 }
      {
        \tblr_prop_gput:nxx
          { spec }
          { col[\int_eval:n {\colnum + 1}] / colsep-left }
          { \dim_eval:n { #1 } }
      }
    \tl_if_blank:nF { #2 }
      {
        \int_step_variable:nNn { \l_tblr_row_count_int } \l_tblr_i_tl
          {
            \tl_set:Nx \l_tmpa_tl
            {
              \tblr_prop_item:ne { cell }
                { (\l_tblr_i_tl,\int_eval:n {\colnum + 1}) }
            }
            \tl_put_left:Nn \l_tmpa_tl { #2 }
            \tblr_prop_gput:nxV
              { cell }
              { (\l_tblr_i_tl,\int_eval:n {\colnum + 1}) }
              \l_tmpa_tl
          }
      }
    \__tblr_execute_column_spec_next:N
  }
\exp_args:Nc \NewDocumentCommand { tblr_column_type_ > } { O{} m }
  {
    \tl_gput_right:Nn \g_tblr_expanded_colspec_tl { >[#1]{#2} }
    \__tblr_expand_column_spec_next:N
  }

\exp_args:Nc \NewDocumentCommand { tblr_primitive_column_type_ < } { O{} m }
  {
    \tl_if_blank:nF { #1 }
      {
        \tblr_prop_gput:nxx
          { spec }
          { col[\int_use:N \colnum] / colsep-right }
          { \dim_eval:n { #1 } }
      }
    \tl_if_blank:nF { #2 }
      {
        \int_step_variable:nNn { \l_tblr_row_count_int } \l_tblr_i_tl
          {
            \tl_set:Nx \l_tmpa_tl
            {
              \tblr_prop_item:ne { cell } { (\l_tblr_i_tl,\int_use:N \colnum) }
            }
            \tl_put_right:Nn \l_tmpa_tl { #2 }
            \tblr_prop_gput:nxV
              { cell }
              { (\l_tblr_i_tl,\int_use:N \colnum) }
              \l_tmpa_tl
          }
      }
    \__tblr_execute_column_spec_next:N
  }
\exp_args:Nc \NewDocumentCommand { tblr_column_type_ < } { O{} m }
  {
    \tl_gput_right:Nn \g_tblr_expanded_colspec_tl { <[#1]{#2} }
    \__tblr_expand_column_spec_next:N
  }

%% \NewColumnType command and predefined column types

\str_new:N \g_tblr_used_column_types_str
\str_gset_eq:NN
  \g_tblr_used_column_types_str \c_tblr_primitive_column_types_str
\bool_new:N \g_tblr_column_spec_expand_stop_bool

\msg_new:nnn { tblr } { used-column-type }
  { Column ~ type ~ name ~ #1 ~ has ~ been ~ used! }

\NewDocumentCommand \NewColumnType { m O{0} o m }
  {
    \str_if_in:NnTF \g_tblr_used_column_types_str { #1 }
      {
        \msg_warning:nnn { tblr } { used-column-type } { #1 }
        \str_log:N \g_tblr_used_column_types_str
      }
      {
        \tl_clear:N \l_tmpa_tl
        \int_compare:nNnT { #2 } > { 0 }
          {
            \IfValueTF { #3 }
              { \tl_set:Nn \l_tmpa_tl { O{#3} } }
              { \tl_set:Nn \l_tmpa_tl { m } }
            \tl_put_right:Nx \l_tmpa_tl { \prg_replicate:nn { #2 - 1 } { m } }
          }
        \exp_args:NcV \NewDocumentCommand { tblr_column_type_ #1 } \l_tmpa_tl
          {
            \bool_gset_false:N \g_tblr_column_spec_expand_stop_bool
            \tl_gput_right:Nf \g_tblr_expanded_colspec_tl { #4 }
            \__tblr_expand_column_spec_next:N
          }
        \str_gput_right:Nn \g_tblr_used_column_types_str { #1 }
      }
  }

\NewColumnType { l } { Q[l] }
\NewColumnType { c } { Q[c] }
\NewColumnType { r } { Q[r] }

\NewColumnType { t } [1] { Q[t,wd=#1] }
\NewColumnType { p } [1] { Q[p,wd=#1] }
\NewColumnType { m } [1] { Q[m,wd=#1] }
\NewColumnType { b } [1] { Q[b,wd=#1] }

\NewColumnType { ! } [1] { |[text={#1}] }
\NewColumnType { @ } [1] { <[0pt]{} |[text={#1}] >[0pt]{} }
\NewColumnType { * } [2] { \prg_replicate:nn {#1} {#2} }

\cs_new_protected:Npn \__tblr_parse_column_spec:n #1
  {
    \tl_gset:Nn \g_tblr_expanded_colspec_tl { #1 }
    \__tblr_expand_column_spec:N \g_tblr_expanded_colspec_tl
    \__tblr_execute_column_spec:N \g_tblr_expanded_colspec_tl
  }

%% Expand defined column types

\cs_new_protected:Npn \__tblr_expand_column_spec:N #1
  {
    \bool_do_until:Nn \g_tblr_column_spec_expand_stop_bool
      {
        \tl_log:N #1
        \bool_gset_true:N \g_tblr_column_spec_expand_stop_bool
        \tl_set_eq:NN \l_tmpa_tl #1
        \tl_gclear:N #1
        \exp_last_unbraced:NV
          \__tblr_expand_column_spec_next:N \l_tmpa_tl \scan_stop:
      }
  }

\msg_new:nnn { tblr } { unexpandable-column-type }
  { Unexpandable ~ command ~ #1 inside ~ column ~ type! }

\msg_new:nnn { tblr } { unknown-column-type }
  { Unknown ~ column ~ type ~ #1! }

\cs_new_protected:Npn \__tblr_expand_column_spec_next:N #1
  {
    \token_if_eq_catcode:NNTF #1 \scan_stop:
      {
        \token_if_eq_meaning:NNF #1 \scan_stop:
          { \msg_error:nnn { tblr } { unexpandable-column-type } { #1 } }
      }
      {
        \str_if_in:NnTF \g_tblr_used_column_types_str { #1 }
          { \cs:w tblr_column_type_  #1 \cs_end: }
          {
            \msg_error:nnn { tblr } { unknown-column-type } { #1 }
            \str_log:N \g_tblr_used_column_types_str
          }
      }
  }

%% Execute primitive column types

\cs_new_protected:Npn \__tblr_execute_column_spec:N #1
  {
    \int_zero:N \colnum
    \exp_last_unbraced:NV \__tblr_execute_column_spec_next:N #1 \scan_stop:
  }

\cs_new_protected:Npn \__tblr_execute_column_spec_next:N #1
  {
    \token_if_eq_meaning:NNF #1 \scan_stop:
      { \cs:w tblr_primitive_column_type_  #1 \cs_end: }
  }

%% Calculate the width and height of every cell
\cs_new_protected:Npn \__tblr_calculate_cell_size
  {
    %% We need these two counters in executing table commands inside cells
    \int_zero:N \rownum
    \int_zero:N \colnum
    \int_step_inline:nn { \l_tblr_row_count_int }
      {
        \int_incr:N \rownum
        \int_zero:N \colnum
        \int_step_inline:nn { \l_tblr_col_count_int }
          {
            \int_incr:N \colnum
            \__tblr_measure_and_update_size:nnNNN
              { \int_use:N \rownum }
              { \int_use:N \colnum }
              \l_tblr_w_dim
              \l_tblr_h_dim
              \l_tblr_d_dim
          }
      }
    \tblr_prop_log:n {spec }
  }

%% Measure and update natural dimensions of the row/column/cell
%% #1: row number, #2 column number
%% #3: width dimension, #4: height dimension, $5 depth dimension
\cs_new_protected:Npn \__tblr_measure_and_update_size:nnNNN #1 #2 #3 #4 #5
  {
    \__tblr_measure_cell_size:nnNNN { #1 } { #2 } #3 #4 #5
    \__tblr_update_cell_size:nnNNN { #1 } { #2 } #3 #4 #5
    \__tblr_update_row_col_size:nnNNN { #1 } { #2 } #3 #4 #5
  }

%% Measure natural dimensions of the cell
%% #1: row number, #2 column number
%% #3: width dimension, #4: height dimension, $5 depth dimension
\cs_new_protected:Npn \__tblr_measure_cell_size:nnNNN #1 #2 #3 #4 #5
  {
    \hbox_set:Nn \l_tblr_c_box
      { \__tblr_get_cell_text:nn { #1 } { #2 } }
    \dim_set:Nn #3 { \box_wd:N \l_tblr_c_box }
    \dim_set:Nn #4 { \box_ht:N \l_tblr_c_box }
    \dim_set:Nn #5 { \box_dp:N \l_tblr_c_box }
  }

%% Get cell text, #1: row number, #2: column number
%% If the width of the cell is set, build a vbox,
%% else if there is any \\ inside it, treat it as a subtable

\cs_new_eq:NN \__tlbr_vbox_top:n    \tex_vtop:D
\cs_new_eq:NN \__tlbr_vbox_middle:n \tex_vcenter:D
\cs_new_eq:NN \__tlbr_vbox_bottom:n \tex_vbox:D
\cs_new_eq:NN \__tlbr_halign_left:   \raggedright
\cs_new_eq:NN \__tlbr_halign_center: \center
\cs_new_eq:NN \__tlbr_halign_right:  \raggedleft

\cs_new_protected:Npn \__tblr_get_cell_text:nn #1 #2
  {
    \tl_set:Nx \l_tblr_c_tl { \tblr_prop_item:ne { cell } { ( #1, #2 ) } }
    \tl_set:Nx \l_tblr_h_tl { \tblr_prop_item:ne { spec } { col[#2] / halign } }
    \tl_set:Nx \l_tblr_v_tl { \tblr_prop_item:ne { spec } { col[#2] / valign } }
    \tl_set:Nx \l_tblr_w_tl { \tblr_prop_item:ne { spec } { col[#2] / width } }
    \tl_if_empty:NTF \l_tblr_w_tl
      {
        \tl_set_eq:NN \l_tmpa_tl \l_tblr_c_tl
        \tblr_insert_braces:N \l_tmpa_tl
        \seq_set_split:NnV \l_tmpa_seq { \\ } \l_tmpa_tl
        \int_compare:nNnT { \seq_count:N \l_tmpa_seq } > { 1 }
          {
            \tl_put_left:Nn \l_tblr_c_tl { \begin{tblr}{ @{} Q @{} } }
            \tl_put_right:Nn \l_tblr_c_tl { \end{tblr} }
          }
        \l_tblr_c_tl
      }
      {
        $ \m@th \cs:w __tlbr_vbox_ \l_tblr_v_tl :n \cs_end: {
            \dim_set:Nn \tex_hsize:D { \l_tblr_w_tl }
            \cs:w __tlbr_halign_ \l_tblr_h_tl : \cs_end:
            \l_tblr_c_tl
        } $
      }
  }

%% Update natural dimensions of the cell
%% #1: row number, #2 column number
%% #3: width dimension, #4: height dimension, $5 depth dimension
\cs_new_protected:Npn \__tblr_update_cell_size:nnNNN #1 #2 #3 #4 #5
  {
    \tblr_prop_gput:nxx
      { spec } { cell[#1][#2] / natural-width } { \dim_use:N #3 }
    \tblr_prop_gput:nxx
      { spec } { cell[#1][#2] / natural-height } { \dim_use:N #4 }
    \tblr_prop_gput:nxx
      { spec } { cell[#1][#2] / natural-depth } { \dim_use:N #5 }
  }

%% Update natural dimensions of the row and the column
%% #1: row number, #2 column number
%% #3: width dimension, #4: height dimension, $5 depth dimension
\cs_new_protected:Npn \__tblr_update_row_col_size:nnNNN #1 #2 #3 #4 #5
  {
    %% Update natural width for every column
    \tl_set:Nx \l_tmpb_tl
      { \tblr_prop_item:ne { spec } { col[#2] / natural-width } }
    \bool_lazy_or:nnT
      { \tl_if_empty_p:N \l_tmpb_tl }
      { \dim_compare_p:nNn { \dim_use:N #3 } > { \l_tmpb_tl } }
      {
        \tblr_prop_gput:nxx { spec } { col[#2]/ natural-width } { \dim_use:N #3 }
      }
    %% Update natural height for every row
    \tl_set:Nx \l_tmpb_tl
      { \tblr_prop_item:ne { spec } { row[#1] / natural-height } }
    \bool_lazy_or:nnT
      { \tl_if_empty_p:N \l_tmpb_tl }
      { \dim_compare_p:nNn { \dim_use:N #4 } > { \l_tmpb_tl } }
      {
        \tblr_prop_gput:nxx { spec } { row[#1] / natural-height } { \dim_use:N #4 }
      }
    %% Update natural depth for every row
    \tl_set:Nx \l_tmpb_tl
      { \tblr_prop_item:ne { spec } { row[#1] / natural-depth } }
    \bool_lazy_or:nnT
      { \tl_if_empty_p:N \l_tmpb_tl }
      { \dim_compare_p:nNn { \dim_use:N #5 } > { \l_tmpb_tl } }
      {
        \tblr_prop_gput:nxx { spec } { row[#1] / natural-depth } { \dim_use:N #5 }
      }
  }

%% Build the whole table
\cs_new_eq:NN \__tlbr_vbox_t:n \tex_vtop:D
\cs_new_eq:NN \__tlbr_vbox_c:n \tex_vcenter:D
\cs_new_eq:NN \__tlbr_vbox_b:n \tex_vbox:D
\cs_new_protected:Npn \__tblr_build_whole:n #1
  {
    \tex_hbox:D
      { $ \m@th \cs:w __tlbr_vbox_ #1 :n \cs_end:
          {
            \int_step_variable:nNn { \l_tblr_row_count_int } \l_tblr_i_tl
              {
                \tblr_prop_if_in:nxTF { spec } { hline[\l_tblr_i_tl] / style }
                  { \hrule }
                  { \hrule height ~ 0pt } % remove lineskip between two rows
                \__tblr_get_row_inner_height_depth:VNN
                  \l_tblr_i_tl \l_tblr_h_dim \l_tblr_d_dim
                \tex_hbox:D
                  {
                    \int_step_variable:nNn { \l_tblr_col_count_int } \l_tblr_j_tl
                      {
                        \tblr_prop_if_in:nxT { spec } { vline[\l_tblr_j_tl]/style }
                          {
                            \vrule height~\l_tblr_h_dim ~ depth~\l_tblr_d_dim
                          }
                        \__tblr_build_cell:NN \l_tblr_i_tl \l_tblr_j_tl
                      }
                    \tblr_prop_if_in:nxT { spec }
                      { vline[\int_eval:n {\l_tblr_col_count_int + 1}] / style }
                      {
                        \vrule height~\l_tblr_h_dim ~ depth~\l_tblr_d_dim
                      }
                  }
              }
            \tblr_prop_if_in:nxT { spec }
              { hline[\int_eval:n {\l_tblr_row_count_int + 1}] / style }
              { \hrule }
          } $
      }
  }

\cs_new_protected:Npn \__tblr_build_cell:NN #1 #2
  {
    \tl_set:Nx \l_tblr_w_tl
      { \tblr_prop_item:ne { spec } { col[#2] / natural-width } }
    \tl_set:Nx \l_tblr_a_tl
      { \tblr_prop_item:ne { spec } { col[#2] / halign } }
    \skip_horizontal:n
      { \tblr_prop_item:ne { spec } { col[#2] / colsep-left } }
    \hbox_set_to_wd:Nnn \l_tblr_c_box { \l_tblr_w_tl }
      {
        \tl_if_eq:NnF \l_tblr_a_tl { left } { \hfil }
        \__tblr_get_cell_text:nn { #1 } { #2 }
        \tl_if_eq:NnT \l_tblr_a_tl { center } { \hfil }
      }
    \box_set_ht:Nn \l_tblr_c_box
      { \tblr_prop_item:ne { spec } { row[#1] / natural-height } }
    \box_set_dp:Nn \l_tblr_c_box
      { \tblr_prop_item:ne { spec } { row[#1] / natural-depth } }
    \box_use:N \l_tblr_c_box
    \skip_horizontal:n
      { \tblr_prop_item:ne { spec } { col[#2] / colsep-right } }
  }

%% Read from table specifications and calculate inner height of row
%% inner height = rowsep above  + natural height
%% inner depth  = natural depth + rowsep below
%% #1: the row number, #2: inner height, #3: inner depth
\cs_new_protected:Npn \__tblr_get_row_inner_height_depth:nNN #1 #2 #3
  {
    \tl_set:Nx \l_tblr_a
      { \tblr_prop_item:ne { spec } { row[#1] / rowsep-above } }
    \tl_set:Nx \l_tblr_h
      { \tblr_prop_item:ne { spec } { row[#1] / natural-height } }
    \tl_set:Nx \l_tblr_d
      { \tblr_prop_item:ne { spec } { row[#1] / natural-depth } }
    \tl_set:Nx \l_tblr_b
      { \tblr_prop_item:ne { spec } { row[#1] / rowsep-below } }
    \dim_set:Nn #2 { \l_tblr_a + \l_tblr_h}
    \dim_set:Nn #3 { \l_tblr_d + \l_tblr_b }
  }
\cs_generate_variant:Nn \__tblr_get_row_inner_height_depth:nNN { V }

\ExplSyntaxOff

